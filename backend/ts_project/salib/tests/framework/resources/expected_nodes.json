{
  "transformer": [
    {
      "type": "AbsValue",
      "desc": "Take the absolute value for series (modulo)",
      "display": "Absolute value",
      "params": [],
      "inputs": {
        "num_required_inputs": 1,
        "names": [
          "input"
        ]
      }
    },
    {
      "type": "ALMA",
      "desc": "Arnaud Legoux moving average",
      "display": "Arnaud Legoux moving average",
      "params": [
        {
          "id": "window",
          "type": "String",
          "display": "Window",
          "desc": "Window size in periods or time interval (eg: 12h)",
          "conditions": [],
          "value": "12h"
        }
      ],
      "inputs": {
        "num_required_inputs": 1,
        "names": [
          "input"
        ]
      }
    },
    {
      "type": "AutoRegression",
      "desc": "Simple SAR model, with lags & seasonality. Fast implementation of SARIMA.",
      "display": "Auto-Regression",
      "params": [
        {
          "id": "lags",
          "type": "String",
          "display": "#Lags",
          "desc": "Lags, in period (eg 12h) or count",
          "conditions": [],
          "value": "7d"
        },
        {
          "id": "period",
          "type": "String",
          "display": "Period",
          "desc": "Seasonality in period (eg 12h) or count. Leave empty for none.",
          "conditions": [],
          "value": ""
        },
        {
          "id": "output",
          "type": "Select",
          "display": "Output",
          "desc": "Model output",
          "conditions": [],
          "value": "resid",
          "options": [
            {
              "code": "resid",
              "display": "Residual"
            },
            {
              "code": "predicted",
              "display": "Predicted"
            }
          ]
        }
      ],
      "inputs": {
        "num_required_inputs": 1,
        "names": [
          "input"
        ]
      }
    },
    {
      "type": "BoxCox",
      "desc": "BoxCox transform with optional lambda",
      "display": "BoxCox",
      "params": [
        {
          "id": "lambda",
          "type": "Float",
          "display": "Lambda",
          "desc": "Lambda power, leave empty to estimate.",
          "conditions": [],
          "value": null
        }
      ],
      "inputs": {
        "num_required_inputs": 1,
        "names": [
          "input"
        ]
      }
    },
    {
      "type": "Clamp",
      "desc": "Assigns values outside boundary to boundary values",
      "display": "Clamp",
      "params": [
        {
          "id": "lower",
          "type": "Float",
          "display": "Lower",
          "desc": "Lower bound",
          "conditions": [],
          "value": 0.0
        },
        {
          "id": "upper",
          "type": "Float",
          "display": "Upper",
          "desc": "Upper bound",
          "conditions": [],
          "value": 1.0
        }
      ],
      "inputs": {
        "num_required_inputs": 1,
        "names": [
          "input"
        ]
      }
    },
    {
      "type": "Derivative",
      "desc": "Derivative operator",
      "display": "Derivative",
      "params": [
        {
          "id": "lag",
          "type": "String",
          "display": "Lag",
          "desc": "Lag to apply (eg: 1h, 10)",
          "conditions": [],
          "value": "12h"
        },
        {
          "id": "metric",
          "type": "Select",
          "display": "Difference metric",
          "desc": "Difference metric between window values",
          "conditions": [],
          "value": "sub",
          "options": [
            {
              "code": "sub",
              "display": "Substract"
            },
            {
              "code": "l1",
              "display": "L1 distance metric (mod sub)"
            },
            {
              "code": "rel_diff",
              "display": "Relative difference"
            },
            {
              "code": "abs_rel_diff",
              "display": "Absolute relative difference"
            }
          ]
        }
      ],
      "inputs": {
        "num_required_inputs": 1,
        "names": [
          "input"
        ]
      }
    },
    {
      "type": "Difference",
      "desc": "Difference operator",
      "display": "Difference",
      "params": [
        {
          "id": "metric",
          "type": "Select",
          "display": "Difference metric",
          "desc": "Difference metric between window values",
          "conditions": [],
          "value": "sub",
          "options": [
            {
              "code": "sub",
              "display": "Substract"
            },
            {
              "code": "l1",
              "display": "L1 distance metric (mod sub)"
            },
            {
              "code": "rel_diff",
              "display": "Relative difference"
            },
            {
              "code": "abs_rel_diff",
              "display": "Absolute relative difference"
            }
          ]
        }
      ],
      "inputs": {
        "num_required_inputs": 2,
        "names": [
          "left",
          "right"
        ]
      }
    },
    {
      "type": "Divide",
      "desc": "Divide operator",
      "display": "Divide",
      "params": [
        {
          "id": "zero_div",
          "type": "Int",
          "display": "Zero div:",
          "desc": "Value for division by zero. Empty to skip",
          "conditions": [],
          "value": 0
        }
      ],
      "inputs": {
        "num_required_inputs": 2,
        "names": [
          "left",
          "right"
        ]
      }
    },
    {
      "type": "Dropout",
      "desc": "Dropout window analysis",
      "display": "Dropout",
      "params": [
        {
          "id": "dropout_window",
          "type": "String",
          "display": "Dropout window",
          "desc": "Window size in time interval (eg: 12h). Must be smaller than the context window.",
          "conditions": [],
          "value": "12h"
        },
        {
          "id": "context_window",
          "type": "String",
          "display": "Context window",
          "desc": "Window size in time interval (eg: 12h). Must be larger than the dropout window.",
          "conditions": [],
          "value": "7d"
        },
        {
          "id": "center",
          "type": "Boolean",
          "display": "Center",
          "desc": "Center aggregation window around value",
          "conditions": [],
          "value": false
        },
        {
          "id": "min_periods",
          "type": "String",
          "display": "Min. periods",
          "desc": "Min number of periods (eg: 12h). Leave empty for window size.",
          "conditions": [],
          "value": ""
        },
        {
          "id": "agg_method",
          "type": "Select",
          "display": "Aggregation",
          "desc": "Aggregation method",
          "conditions": [],
          "value": "mean",
          "options": [
            {
              "code": "mean",
              "display": "Mean"
            },
            {
              "code": "median",
              "display": "Median"
            },
            {
              "code": "sum",
              "display": "Sum"
            },
            {
              "code": "min",
              "display": "Min"
            },
            {
              "code": "max",
              "display": "Max"
            },
            {
              "code": "count",
              "display": "Value count"
            },
            {
              "code": "nnz",
              "display": "Non zero count"
            },
            {
              "code": "nunique",
              "display": "Unique count"
            },
            {
              "code": "std",
              "display": "Sample standard dev."
            },
            {
              "code": "var",
              "display": "Sample variance"
            },
            {
              "code": "skew",
              "display": "Sample skewness"
            },
            {
              "code": "kurt",
              "display": "Sample kurtosis"
            }
          ]
        },
        {
          "id": "combine_method",
          "type": "Select",
          "display": "Combine func.",
          "desc": "Combination method for context-dropout windows",
          "conditions": [],
          "value": "sub",
          "options": [
            {
              "code": "sub",
              "display": "Substract"
            },
            {
              "code": "prop",
              "display": "Ratio"
            },
            {
              "code": "ks",
              "display": "Kolmorogov-Smirnov"
            }
          ]
        },
        {
          "id": "combine_method_order",
          "type": "Select",
          "display": "Combine order",
          "desc": "Combination method parameters order",
          "conditions": [],
          "value": "dropout-context",
          "options": [
            {
              "code": "dropout-context",
              "display": "Dropout,context"
            },
            {
              "code": "context-dropout",
              "display": "Context,dropout"
            }
          ]
        }
      ],
      "inputs": {
        "num_required_inputs": 1,
        "names": [
          "input"
        ]
      }
    },
    {
      "type": "ExponentialSmoothing",
      "desc": "ExponentialSmoothing model with trend and (optional) seasonality",
      "display": "Exponential Smoothing",
      "params": [
        {
          "id": "damped_trend",
          "type": "Boolean",
          "display": "Damped trend",
          "desc": "Damped trend",
          "conditions": [],
          "value": true
        },
        {
          "id": "seasonal_length",
          "type": "String",
          "display": "Seasonal length",
          "desc": "Season length (in intervals or period, eg. 3h). Leave empty for no seasonality.",
          "conditions": [],
          "value": "7d"
        },
        {
          "id": "output",
          "type": "Select",
          "display": "Output",
          "desc": "Model output",
          "conditions": [],
          "value": "resid",
          "options": [
            {
              "code": "resid",
              "display": "Residual"
            },
            {
              "code": "predicted",
              "display": "Predicted"
            }
          ]
        }
      ],
      "inputs": {
        "num_required_inputs": 1,
        "names": [
          "input"
        ]
      }
    },
    {
      "type": "ExponentialMovingAverage",
      "desc": "Exponential moving average with decay rate. Mean, var or std dev.",
      "display": "Exponential moving average",
      "params": [
        {
          "id": "span",
          "type": "String",
          "display": "Span",
          "desc": "Span size in time interval (eg: 12h)",
          "conditions": [],
          "value": "12h"
        },
        {
          "id": "min_periods",
          "type": "String",
          "display": "Min. periods",
          "desc": "Min number of periods (eg: 12h). Leave empty for window size.",
          "conditions": [],
          "value": ""
        },
        {
          "id": "recursive",
          "type": "Boolean",
          "display": "Recursive",
          "desc": "Calculate recursively using all past values (vs fixed window size)",
          "conditions": [],
          "value": true
        },
        {
          "id": "agg_method",
          "type": "Select",
          "display": "Aggregation",
          "desc": "Aggregation method",
          "conditions": [],
          "value": "mean",
          "options": [
            {
              "code": "mean",
              "display": "Mean"
            },
            {
              "code": "std",
              "display": "Sample standard dev."
            },
            {
              "code": "var",
              "display": "Sample variance"
            }
          ]
        }
      ],
      "inputs": {
        "num_required_inputs": 1,
        "names": [
          "input"
        ]
      }
    },
    {
      "type": "FFTFilter",
      "desc": "Fast Fourier Transform band pass filter",
      "display": "FFT filter",
      "params": [
        {
          "id": "cutoff",
          "type": "String",
          "display": "Power cutoff",
          "desc": "Power value or percentile cutoff for bandpass. Eg: 500 or 50%",
          "conditions": [],
          "value": "95%"
        },
        {
          "id": "output",
          "type": "Select",
          "display": "Output",
          "desc": "Output filtered signal or residuals",
          "conditions": [],
          "value": "filtered",
          "options": [
            {
              "code": "filtered",
              "display": "Filtered"
            },
            {
              "code": "resid",
              "display": "Residual"
            }
          ]
        }
      ],
      "inputs": {
        "num_required_inputs": 1,
        "names": [
          "input"
        ]
      }
    },
    {
      "type": "GARCH",
      "desc": "Generalized ARCH model for volatility modeling. Inputs can be in periods or interval length.",
      "display": "GARCH",
      "params": [
        {
          "id": "p",
          "type": "String",
          "display": "p",
          "desc": "Lag order of series\u00b2",
          "conditions": [],
          "value": "1"
        },
        {
          "id": "q",
          "type": "String",
          "display": "q",
          "desc": "Lag order of volatility",
          "conditions": [],
          "value": "1"
        }
      ],
      "inputs": {
        "num_required_inputs": 1,
        "names": [
          "input"
        ]
      }
    },
    {
      "type": "Identity",
      "desc": "Identity - no transformation. Use to probe series.",
      "display": "Identity/probe",
      "params": [
        {
          "id": "mean",
          "type": "Boolean",
          "display": "Mean",
          "desc": "Series mean",
          "conditions": [],
          "value": false
        },
        {
          "id": "stddev",
          "type": "Boolean",
          "display": "Std. deviation",
          "desc": "Series standard deviation",
          "conditions": [],
          "value": false
        },
        {
          "id": "adf_test",
          "type": "Boolean",
          "display": "ADF test",
          "desc": "Augmented Dicky-Fuller test",
          "conditions": [],
          "value": false
        },
        {
          "id": "normality_test",
          "type": "Boolean",
          "display": "Normal test",
          "desc": "Normality test",
          "conditions": [],
          "value": false
        },
        {
          "id": "histogram",
          "type": "Boolean",
          "display": "Histogram",
          "desc": "Histogram plot",
          "conditions": [],
          "value": false
        },
        {
          "id": "histogram_bins",
          "type": "BoundedInt",
          "display": "Histogram bins",
          "desc": "Number of equal spaced bins in histogram",
          "conditions": [
            {
              "type": "param_equals_value",
              "args": {
                "param": "histogram",
                "value": true
              }
            }
          ],
          "value": 25,
          "min": 2,
          "max": null
        },
        {
          "id": "cum_histogram",
          "type": "Boolean",
          "display": "Cum. Histogram",
          "desc": "Cumulative histogram plot",
          "conditions": [],
          "value": false
        },
        {
          "id": "cum_histogram_bins",
          "type": "BoundedInt",
          "display": "Cum. Histogram bins",
          "desc": "Number of equal spaced bins in cumulative histogram",
          "conditions": [
            {
              "type": "param_equals_value",
              "args": {
                "param": "cum_histogram",
                "value": true
              }
            }
          ],
          "value": 25,
          "min": 2,
          "max": null
        },
        {
          "id": "acf",
          "type": "Boolean",
          "display": "ACF",
          "desc": "Autocorrelation function",
          "conditions": [],
          "value": false
        },
        {
          "id": "acf_lags",
          "type": "String",
          "display": "ACF lags",
          "desc": "ACF max lags",
          "conditions": [
            {
              "type": "param_equals_value",
              "args": {
                "param": "acf",
                "value": true
              }
            }
          ],
          "value": "7d"
        },
        {
          "id": "pacf",
          "type": "Boolean",
          "display": "PACF",
          "desc": "Partial autocorrelation function",
          "conditions": [],
          "value": false
        },
        {
          "id": "pacf_lags",
          "type": "String",
          "display": "PACF lags",
          "desc": "PACF max lags",
          "conditions": [
            {
              "type": "param_equals_value",
              "args": {
                "param": "pacf",
                "value": true
              }
            }
          ],
          "value": "7d"
        }
      ],
      "inputs": {
        "num_required_inputs": 1,
        "names": [
          "input"
        ]
      }
    },
    {
      "type": "MarkovAutoRegression",
      "desc": "Markov Auto-Regression with tunable regimes and AR/VAR order switching",
      "display": "Markov Auto-Regression",
      "params": [
        {
          "id": "lags",
          "type": "String",
          "display": "#Lags",
          "desc": "Lags, in period (eg 12h) or count",
          "conditions": [],
          "value": "7d"
        },
        {
          "id": "num_regimes",
          "type": "BoundedInt",
          "display": "# Regimes",
          "desc": "Number of regimes",
          "conditions": [],
          "value": 2,
          "min": 2,
          "max": null
        },
        {
          "id": "switching_ar",
          "type": "Boolean",
          "display": "Switching AR",
          "desc": "Switching AR components",
          "conditions": [],
          "value": false
        },
        {
          "id": "switching_var",
          "type": "Boolean",
          "display": "Switching var",
          "desc": "Switching variance components",
          "conditions": [],
          "value": false
        },
        {
          "id": "output_regime",
          "type": "BoundedInt",
          "display": "Regime output",
          "desc": "Output probabilities from specified regime. Value must be [0, num_regimes)",
          "conditions": [],
          "value": 1,
          "min": 0,
          "max": null
        }
      ],
      "inputs": {
        "num_required_inputs": 1,
        "names": [
          "input"
        ]
      }
    },
    {
      "type": "MultiRollingAggregate",
      "desc": "Multi Rolling aggregate",
      "display": "Multi Rolling Aggregate",
      "params": [
        {
          "id": "window",
          "type": "String",
          "display": "Window",
          "desc": "Window size in time interval (eg: 12h)",
          "conditions": [],
          "value": "12h"
        },
        {
          "id": "center",
          "type": "Boolean",
          "display": "Center",
          "desc": "Center aggregation window around value",
          "conditions": [],
          "value": false
        },
        {
          "id": "min_periods",
          "type": "String",
          "display": "Min. periods",
          "desc": "Min number of periods (eg: 12h). Leave empty for window size.",
          "conditions": [],
          "value": ""
        },
        {
          "id": "agg_method",
          "type": "Select",
          "display": "Aggregation",
          "desc": "Aggregation method",
          "conditions": [],
          "value": "proportion",
          "options": [
            {
              "code": "proportion",
              "display": "Proportion"
            },
            {
              "code": "ks",
              "display": "Kolmorogov-Smirnov"
            },
            {
              "code": "es",
              "display": "Epps-Singleton"
            },
            {
              "code": "correlation_pearson",
              "display": "Pearson Correlation"
            },
            {
              "code": "correlation_kendall",
              "display": "Kendall Correlation"
            },
            {
              "code": "correlation_spearman",
              "display": "Spearman Correlation"
            }
          ]
        }
      ],
      "inputs": {
        "num_required_inputs": 2,
        "names": [
          "lhs",
          "rhs"
        ]
      }
    },
    {
      "type": "Rescale",
      "desc": "Rescale data to given min-max values",
      "display": "Rescale",
      "params": [
        {
          "id": "lower",
          "type": "Float",
          "display": "Lower",
          "desc": "Lower bound",
          "conditions": [],
          "value": 0.0
        },
        {
          "id": "upper",
          "type": "Float",
          "display": "Upper",
          "desc": "Upper bound",
          "conditions": [],
          "value": 1.0
        }
      ],
      "inputs": {
        "num_required_inputs": 1,
        "names": [
          "input"
        ]
      }
    },
    {
      "type": "RollingAggregate",
      "desc": "Rolling aggregate",
      "display": "Rolling Aggregate",
      "params": [
        {
          "id": "window",
          "type": "String",
          "display": "Window",
          "desc": "Window size in time interval (eg: 12h)",
          "conditions": [],
          "value": "12h"
        },
        {
          "id": "center",
          "type": "Boolean",
          "display": "Center",
          "desc": "Center aggregation window around value",
          "conditions": [],
          "value": false
        },
        {
          "id": "min_periods",
          "type": "String",
          "display": "Min. periods",
          "desc": "Min number of periods (eg: 12h). Leave empty for window size.",
          "conditions": [],
          "value": ""
        },
        {
          "id": "agg_method",
          "type": "Select",
          "display": "Aggregation",
          "desc": "Aggregation method",
          "conditions": [],
          "value": "mean",
          "options": [
            {
              "code": "mean",
              "display": "Mean"
            },
            {
              "code": "median",
              "display": "Median"
            },
            {
              "code": "sum",
              "display": "Sum"
            },
            {
              "code": "min",
              "display": "Min"
            },
            {
              "code": "max",
              "display": "Max"
            },
            {
              "code": "quantile",
              "display": "Quantile"
            },
            {
              "code": "iqr",
              "display": "Inter-quartile range"
            },
            {
              "code": "idr",
              "display": "Inter-decile range"
            },
            {
              "code": "nnz",
              "display": "Non zero count"
            },
            {
              "code": "nunique",
              "display": "Unique count"
            },
            {
              "code": "std",
              "display": "Sample standard dev."
            },
            {
              "code": "var",
              "display": "Sample variance"
            },
            {
              "code": "skew",
              "display": "Sample skewness"
            },
            {
              "code": "kurt",
              "display": "Sample kurtosis"
            }
          ]
        },
        {
          "id": "quantile_range",
          "type": "BoundedFloat",
          "display": "Quantile range",
          "desc": "Quantile range [q;1-q]",
          "conditions": [
            {
              "type": "param_equals_value",
              "args": {
                "param": "agg_method",
                "value": "quantile"
              }
            }
          ],
          "value": 0.25,
          "min": 0,
          "max": 0.5,
          "strict_min": false,
          "strict_max": false
        }
      ],
      "inputs": {
        "num_required_inputs": 1,
        "names": [
          "input"
        ]
      }
    },
    {
      "type": "SARIMAX",
      "desc": "SARIMAX model, with lags, seasonality and exogenous series. Inputs can be in periods or interval length.",
      "display": "SARIMAX",
      "params": [
        {
          "id": "p",
          "type": "String",
          "display": "p",
          "desc": "AR order",
          "conditions": [],
          "value": "7d"
        },
        {
          "id": "d",
          "type": "BoundedInt",
          "display": "d",
          "desc": "Differencing degree",
          "conditions": [],
          "value": 0,
          "min": 0,
          "max": null
        },
        {
          "id": "q",
          "type": "String",
          "display": "q",
          "desc": "MA order",
          "conditions": [],
          "value": "0"
        },
        {
          "id": "seasonal",
          "type": "Boolean",
          "display": "Seasonal",
          "desc": "Seasonal components",
          "conditions": [],
          "value": false
        },
        {
          "id": "P",
          "type": "String",
          "display": "P",
          "desc": "Seasonal AR order",
          "conditions": [
            {
              "type": "param_equals_value",
              "args": {
                "param": "seasonal",
                "value": true
              }
            }
          ],
          "value": "0"
        },
        {
          "id": "D",
          "type": "BoundedInt",
          "display": "D",
          "desc": "Seasonal differencing degree",
          "conditions": [
            {
              "type": "param_equals_value",
              "args": {
                "param": "seasonal",
                "value": true
              }
            }
          ],
          "value": 0,
          "min": 0,
          "max": null
        },
        {
          "id": "Q",
          "type": "String",
          "display": "Q",
          "desc": "Seasonal MA order",
          "conditions": [
            {
              "type": "param_equals_value",
              "args": {
                "param": "seasonal",
                "value": true
              }
            }
          ],
          "value": "0"
        },
        {
          "id": "s",
          "type": "String",
          "display": "s",
          "desc": "Season length",
          "conditions": [
            {
              "type": "param_equals_value",
              "args": {
                "param": "seasonal",
                "value": true
              }
            }
          ],
          "value": "0"
        },
        {
          "id": "output",
          "type": "Select",
          "display": "Output",
          "desc": "Model output",
          "conditions": [],
          "value": "resid",
          "options": [
            {
              "code": "resid",
              "display": "Residual"
            },
            {
              "code": "predicted",
              "display": "Predicted"
            }
          ]
        }
      ],
      "inputs": {
        "num_required_inputs": null,
        "names": []
      }
    },
    {
      "type": "STL",
      "desc": "Seasonal-Trend decomposition (LOESS)",
      "display": "STL decomposition",
      "params": [
        {
          "id": "output",
          "type": "Select",
          "display": "Output",
          "desc": "STL output",
          "conditions": [],
          "value": "trend",
          "options": [
            {
              "code": "trend",
              "display": "Trend"
            },
            {
              "code": "seasonal",
              "display": "Seasonality"
            },
            {
              "code": "resid",
              "display": "Residual"
            },
            {
              "code": "weights",
              "display": "Outlier weights"
            }
          ]
        },
        {
          "id": "period",
          "type": "String",
          "display": "Period",
          "desc": "Expected seasonality in periods or time interval (eg: 12h)",
          "conditions": [],
          "value": "7d"
        },
        {
          "id": "seasonal_smoother",
          "type": "String",
          "display": "Seasonal smoother",
          "desc": "Seasonal smoother in periods or time interval (eg: 12h)",
          "conditions": [],
          "value": "7"
        },
        {
          "id": "robust",
          "type": "Boolean",
          "display": "Robust",
          "desc": "Tolerate larger errors using LOWESS. See weights output",
          "conditions": [],
          "value": true
        }
      ],
      "inputs": {
        "num_required_inputs": 1,
        "names": [
          "input"
        ]
      }
    },
    {
      "type": "Seasonal decompose",
      "desc": "Seasonal & trend decomposition using averages",
      "display": "Seasonal decomposition",
      "params": [
        {
          "id": "output",
          "type": "Select",
          "display": "Output",
          "desc": "Seasonal decompose output",
          "conditions": [],
          "value": "trend",
          "options": [
            {
              "code": "trend",
              "display": "Trend"
            },
            {
              "code": "seasonal",
              "display": "Seasonality"
            },
            {
              "code": "resid",
              "display": "Residual"
            }
          ]
        },
        {
          "id": "period",
          "type": "String",
          "display": "Period",
          "desc": "Expected seasonality in periods or time interval (eg: 12h)",
          "conditions": [],
          "value": "7d"
        },
        {
          "id": "two_sided",
          "type": "Boolean",
          "display": "Two sided",
          "desc": "Calculate moving averages in both directions for robustness",
          "conditions": [],
          "value": true
        }
      ],
      "inputs": {
        "num_required_inputs": 1,
        "names": [
          "input"
        ]
      }
    },
    {
      "type": "Sigmoid",
      "desc": "Sigmoid function",
      "display": "Sigmoid",
      "params": [],
      "inputs": {
        "num_required_inputs": 1,
        "names": [
          "input"
        ]
      }
    },
    {
      "type": "StdNormalize",
      "desc": "Normalize data such that mean = 0 and std dev = 1",
      "display": "Standard normalization",
      "params": [],
      "inputs": {
        "num_required_inputs": 1,
        "names": [
          "input"
        ]
      }
    },
    {
      "type": "Shift",
      "desc": "Shift series in time by a fixed time delta",
      "display": "Time shift",
      "params": [
        {
          "id": "delta",
          "type": "String",
          "display": "Time delta",
          "desc": "Time delta to shift (eg: 1h)",
          "conditions": [],
          "value": "12h"
        },
        {
          "id": "shift_values",
          "type": "Boolean",
          "display": "Shift values",
          "desc": "Shift values or only index",
          "conditions": [],
          "value": false
        }
      ],
      "inputs": {
        "num_required_inputs": 1,
        "names": [
          "input"
        ]
      }
    },
    {
      "type": "VAR",
      "desc": "Vector AutoRegression with lags",
      "display": "VAR",
      "params": [
        {
          "id": "p",
          "type": "String",
          "display": "p",
          "desc": "AR order",
          "conditions": [],
          "value": "1"
        },
        {
          "id": "output",
          "type": "Select",
          "display": "Output",
          "desc": "Model output",
          "conditions": [],
          "value": "resid",
          "options": [
            {
              "code": "resid",
              "display": "Residual"
            },
            {
              "code": "predicted",
              "display": "Predicted"
            }
          ]
        }
      ],
      "inputs": {
        "num_required_inputs": 2,
        "names": [
          "fst",
          "snd"
        ]
      }
    }
  ],
  "detector": [
    {
      "type": "Quantile",
      "desc": "Compare values with given quantiles and identify anomalies beyond inter-quantile range",
      "display": "Quantile",
      "params": [
        {
          "id": "upper",
          "type": "BoundedFloat",
          "display": "Quantile upper %",
          "desc": "Quantile upper bound (%) - leave empty for no limit",
          "conditions": [],
          "value": 90,
          "min": 0,
          "max": 100,
          "strict_min": false,
          "strict_max": false
        },
        {
          "id": "lower",
          "type": "BoundedFloat",
          "display": "Quantile lower %",
          "desc": "Quantile lower bound (%) - leave empty for no limit",
          "conditions": [],
          "value": 0,
          "min": 0,
          "max": 100,
          "strict_min": false,
          "strict_max": false
        },
        {
          "id": "inside",
          "type": "Boolean",
          "display": "Inside",
          "desc": "If true, value must be within bounds",
          "conditions": [],
          "value": false
        },
        {
          "id": "strict",
          "type": "Boolean",
          "display": "Strict",
          "desc": "Strict comparison on bounds",
          "conditions": [],
          "value": true
        }
      ],
      "inputs": {
        "num_required_inputs": 1,
        "names": [
          "input"
        ]
      }
    },
    {
      "type": "SimpleThreshold",
      "desc": "Detect values outside of bounds",
      "display": "Simple Threshold",
      "params": [
        {
          "id": "upper",
          "type": "Float",
          "display": "Upper",
          "desc": "Upper bound",
          "conditions": [],
          "value": null
        },
        {
          "id": "lower",
          "type": "Float",
          "display": "Lower",
          "desc": "Lower bound",
          "conditions": [],
          "value": null
        },
        {
          "id": "inside",
          "type": "Boolean",
          "display": "Inside",
          "desc": "If true, value must be within bounds",
          "conditions": [],
          "value": false
        },
        {
          "id": "strict",
          "type": "Boolean",
          "display": "Strict",
          "desc": "Strict comparison on bounds",
          "conditions": [],
          "value": false
        }
      ],
      "inputs": {
        "num_required_inputs": 1,
        "names": [
          "input"
        ]
      }
    }
  ],
  "aggregator": [
    {
      "type": "Intersect",
      "desc": "Combine and merge overlapping anomalies from sources",
      "display": "Intersect",
      "params": [
        {
          "id": "resolution",
          "type": "Select",
          "display": "Resolution",
          "desc": "Combine using temporal axis or anomaly wise",
          "conditions": [],
          "value": "temporal",
          "options": [
            {
              "code": "temporal",
              "display": "Temporal"
            },
            {
              "code": "anomaly",
              "display": "Anomaly"
            }
          ]
        },
        {
          "id": "strict",
          "type": "Boolean",
          "display": "Strict",
          "desc": "If true anomalies must match exact bounds, otherwise, any overlap is considered valid",
          "conditions": [
            {
              "type": "param_equals_value",
              "args": {
                "param": "resolution",
                "value": "anomaly"
              }
            }
          ],
          "value": true
        }
      ],
      "inputs": {
        "num_required_inputs": null,
        "names": []
      }
    },
    {
      "type": "Slack",
      "desc": "Extend anomalies and combine",
      "display": "Slack",
      "params": [
        {
          "id": "slack",
          "type": "BoundedInt",
          "display": "Slack (%)",
          "desc": "Anomaly extension as % of anomaly span",
          "conditions": [],
          "value": 25,
          "min": 0,
          "max": null
        },
        {
          "id": "min_span",
          "type": "String",
          "display": "Min. span",
          "desc": "Min. anomaly span to extend (intervals or period, ej '3h'. Leave empty to ignore.",
          "conditions": [],
          "value": ""
        },
        {
          "id": "min_gap",
          "type": "String",
          "display": "Min. gap",
          "desc": "Min. gap between anomalies (intervals or period, ej '3h'. Leave empty to ignore.",
          "conditions": [],
          "value": ""
        }
      ],
      "inputs": {
        "num_required_inputs": null,
        "names": []
      }
    },
    {
      "type": "Union",
      "desc": "Combine all anomalies from sources",
      "display": "Union",
      "params": [],
      "inputs": {
        "num_required_inputs": null,
        "names": []
      }
    }
  ]
}
